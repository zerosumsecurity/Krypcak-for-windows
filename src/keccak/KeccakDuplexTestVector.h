#pragma once

/*
	Testvector from KeccakDuplexIntermediateValues_r1027c573.txt
	as supplied in the KeccakCodePackage-master released by the 
	Keccak designer in July 2013
*/

//0 bits input 
static const UINT8 NUM_TEST_BYTES_0 = 0;
static const UINT8 LAST_BYTE_0 = 0x1;

//123 bits input = 15 bytes plus 3 bits in last byte
static const UINT8 NUM_TEST_BYTES_1 = 15;
static const UINT8 TEST_INPUT_1[15] = 
{
	0x89,0x31,0xA3,0x8D,0xFE,0xDE,0xFE,0xDC,0x2F,0x3E,0x0A,0x7C,0x03,0x90,0xE6
};
static const UINT8 LAST_BYTE_1 = 0xc;


//246 bits = 30 bytes plus 6 bits in last byte
static const UINT8 NUM_TEST_BYTES_2 = 30;
static const UINT8 TEST_INPUT_2[30] = 
{
	0xCB,0x66,0x65,0x70,0x58,0x87,0xAC,0x8F,0xC8,0xF6,0xB5,0xBD,0xB9,0xD5,0x44,0x46,
	0x19,0x2A,0x98,0x03,0x1A,0xFE,0x86,0x49,0x8B,0xC6,0xBD,0xB4,0x6F,0xD3
};
static const UINT8 LAST_BYTE_2 = 0x52;

//369 bits = 46 bytes plus 1 bit in last byte
static const UINT8 NUM_TEST_BYTES_3 =  46;
static const UINT8 TEST_INPUT_3[46] = 
{
	0x81,0x5E,0x65,0x43,0xAA,0x91,0xFF,0x38,0x6D,0x01,0x19,0xF6,0xF9,0x62,0x76,0xE2,
	0x77,0x58,0x1F,0x60,0x90,0xCB,0xD7,0x73,0x52,0xEC,0x24,0xDE,0xB5,0xC4,0x98,0xD1,
	0x46,0x7F,0x6F,0x7F,0xEE,0x17,0x1F,0x05,0xBE,0x01,0x48,0x73,0x2E,0x9B
};
static const UINT8 LAST_BYTE_3 = 0x03;

//492 bits = 61 bytes plus 4 bits in last byte
static const UINT8 NUM_TEST_BYTES_4 = 61;
static const UINT8 TEST_INPUT_4[61] = 
{
	0xCA,0xE0,0xB0,0x0E,0x59,0x1F,0x91,0xED,0x6B,0x7B,0x73,0xAB,0x89,0x8C,0x32,0x54,
	0x30,0x07,0x34,0xFC,0x0D,0x93,0x16,0x8D,0x7B,0x69,0xDF,0xA6,0xA5,0x40,0xAF,0xB2,
	0x21,0xD5,0xC8,0x7F,0x9C,0xB6,0x80,0x0C,0xFB,0x7C,0x31,0x3B,0xF1,0x3B,0xAC,0x0F,
	0x30,0xC8,0xE5,0xEB,0x39,0x29,0x76,0x12,0xEF,0x5A,0x62,0xCC,0x68
};
static const UINT8 LAST_BYTE_4 = 0x13;

//615 bits = 76 bytes plus 7 bits in last byte
static const UINT8 NUM_TEST_BYTES_5 =76;
static const UINT8 TEST_INPUT_5[76] = 
{
	0xFA,0x7B,0xFB,0x73,0xBF,0xF8,0x28,0xF0,0x0D,0x40,0x9A,0x73,0xD9,0xAC,0x0C,0x0E,
	0xEB,0x90,0xF5,0x11,0xD9,0xBE,0xB6,0x37,0xB7,0x9A,0xC8,0x28,0x43,0x05,0x73,0x40,
	0xC3,0xDF,0x30,0x69,0xD1,0xB8,0x97,0xF6,0x6D,0x5A,0x0A,0xF4,0x2A,0x1B,0x52,0x8D,
	0xFC,0xC7,0x69,0x0B,0xC8,0xB0,0xCF,0x17,0xB3,0x13,0xBF,0xC3,0xFA,0x00,0x83,0x5C,
	0xBE,0x9E,0x93,0x62,0x27,0xF1,0xAE,0x25,0xC6,0x8C,0x36,0xFA
};
static const UINT8 LAST_BYTE_5 = 0xfb;

//738 bits = 92 bytes plus 2 bits in last byte
static const UINT8 NUM_TEST_BYTES_6 = 92;
static const UINT8 TEST_INPUT_6[92] = 
{
	0xF6,0xE7,0x7E,0xF1,0x51,0xE0,0x1B,0x80,0x34,0xE7,0xB2,0x59,0x19,0x1C,0xD6,0x21,
	0xEB,0x23,0xB2,0x7D,0x6D,0x6F,0x6E,0x35,0x91,0x51,0x86,0x0A,0xE6,0x80,0x86,0xBF,
	0x61,0xD2,0xA2,0x71,0x2F,0xED,0xDB,0xB4,0x14,0xE8,0x55,0x36,0xA4,0x1A,0xF9,0x8F,
	0xD3,0x16,0x90,0x61,0x9F,0x2F,0x66,0x27,0x7E,0x87,0xF5,0x01,0x06,0xB9,0x7C,0x3D,
	0x27,0xC5,0x4E,0xE2,0x5D,0x4B,0x8C,0x19,0x6D,0xF4,0xF7,0xF6,0xE7,0x7E,0xF1,0x51,
	0xE0,0x1B,0x80,0x34,0xE7,0xB2,0x59,0x19,0x1C,0xD6,0x21,0xEB
};
static const UINT8 LAST_BYTE_6 = 0x07;

//861 bits = 107 bytes plus 5 bits in last byte
static const UINT8 NUM_TEST_BYTES_7 = 107;
static const UINT8 TEST_INPUT_7[107] = 
{
	0x88,0x6C,0x5F,0xDB,0x9B,0x5B,0x4D,0x64,0x94,0xA1,0x82,0x39,0xA0,0xE1,0x6F,0x98,
	0xB4,0x68,0xDC,0x4B,0xFB,0x36,0x2D,0x05,0x7A,0x95,0x0D,0xA9,0x46,0xFE,0xE3,0xB4,
	0x05,0x64,0xD8,0xE7,0x8B,0xD9,0x89,0xDF,0x61,0x7D,0x80,0x41,0x2E,0x5F,0xCF,0x49,
	0xB1,0x93,0x78,0xD7,0x12,0x63,0x46,0x1B,0xFD,0xBD,0xFD,0xB9,0x5F,0x7C,0x14,0xF8,
	0x06,0x20,0xCD,0xB9,0x6C,0x56,0x06,0x87,0x75,0xC8,0xFA,0x88,0x6C,0x5F,0xDB,0x9B,
	0x5B,0x4D,0x64,0x94,0xA1,0x82,0x39,0xA0,0xE1,0x6F,0x98,0xB4,0x68,0xDC,0x4B,0xFB,
	0x36,0x2D,0x05,0x7A,0x95,0x0D,0xA9,0x46,0xFE,0xE3,0xB4
};
static const UINT8 LAST_BYTE_7 = 0x25;

//984 bits = 123 bytes
static const UINT8 NUM_TEST_BYTES_8 = 123;
static const UINT8 TEST_INPUT_8[123] = 
{
	0x20,0xC3,0x3E,0x5F,0xCC,0x4E,0xFC,0x0E,0xEB,0x03,0x0C,0x72,0xF9,0x7A,0x4E,0x8A,
	0x9D,0xC4,0xBB,0x96,0x18,0x33,0xDA,0xE8,0xEF,0xED,0xCF,0xFD,0xE2,0xA3,0xC0,0x37,
	0x00,0x69,0xCE,0x65,0xB3,0x32,0x38,0xAC,0x43,0xD6,0x47,0x64,0xFB,0xDA,0xDE,0xDC,
	0x6A,0x22,0xA3,0x0C,0x15,0xCC,0x01,0x0D,0x7F,0xC3,0xA4,0x45,0xE3,0x5E,0xDA,0xB7,
	0x69,0x29,0xD0,0xAB,0x6C,0x48,0x35,0xF2,0x1F,0xA7,0x2D,0x20,0xC3,0x3E,0x5F,0xCC,
	0x4E,0xFC,0x0E,0xEB,0x03,0x0C,0x72,0xF9,0x7A,0x4E,0x8A,0x9D,0xC4,0xBB,0x96,0x18,
	0x33,0xDA,0xE8,0xEF,0xED,0xCF,0xFD,0xE2,0xA3,0xC0,0x37,0x00,0x69,0xCE,0x65,0xB3,
	0x32,0x38,0xAC,0x43,0xD6,0x47,0x64,0xFB,0xDA,0xDE,0xDC
};
static const UINT8 LAST_BYTE_8 = 0x01;

//1025 bits = 128 bytes and 1 bit in last byte
static const UINT8 NUM_TEST_BYTES_9 = 128;
static const UINT8 TEST_INPUT_9[128] = 
{
	0x6A,0x22,0xA3,0x0C,0x15,0xCC,0x01,0x0D,0x7F,0xC3,0xA4,0x45,0xE3,0x5E,0xDA,0xB7,
	0x69,0x29,0xD0,0xAB,0x6C,0x48,0x35,0xF2,0x1F,0xA7,0x2D,0x20,0xC3,0x3E,0x5F,0xCC,
	0x4E,0xFC,0x0E,0xEB,0x03,0x0C,0x72,0xF9,0x7A,0x4E,0x8A,0x9D,0xC4,0xBB,0x96,0x18,
	0x33,0xDA,0xE8,0xEF,0xED,0xCF,0xFD,0xE2,0xA3,0xC0,0x37,0x00,0x69,0xCE,0x65,0xB3,
	0x32,0x38,0xAC,0x43,0xD6,0x47,0x64,0xFB,0xDA,0xDE,0xDC,0x6A,0x22,0xA3,0x0C,0x15,
	0xCC,0x01,0x0D,0x7F,0xC3,0xA4,0x45,0xE3,0x5E,0xDA,0xB7,0x69,0x29,0xD0,0xAB,0x6C,
	0x48,0x35,0xF2,0x1F,0xA7,0x2D,0x20,0xC3,0x3E,0x5F,0xCC,0x4E,0xFC,0x0E,0xEB,0x03,
	0x0C,0x72,0xF9,0x7A,0x4E,0x8A,0x9D,0xC4,0xBB,0x96,0x18,0x33,0xDA,0xE8,0xEF,0xED
};
static const UINT8 LAST_BYTE_9 = 0x03;

static const UINT8 TEST_OUTPUT[128] = 
{
	0xD9,0x19,0x2C,0x2E,0x1E,0xD3,0xD9,0x29,0xC2,0xF0,0x10,0x09,0x44,0x6E,0x76,0xFC,
	0x91,0x14,0x59,0xA7,0x62,0xD7,0x98,0xE6,0xB7,0x5B,0x19,0xC2,0x69,0x19,0x48,0x2C,
	0x8F,0xF8,0xE2,0xD6,0x7A,0xEA,0x32,0x1D,0x05,0x79,0xAE,0x7C,0x69,0xD1,0x56,0x4C,
	0x0F,0x58,0xA7,0x30,0x74,0x62,0x37,0xE3,0xED,0x86,0x39,0x9F,0x04,0x10,0x9F,0x16,
	0xF5,0x94,0x35,0xBD,0xEA,0xFF,0x25,0x0D,0x1E,0xD9,0xB8,0xF9,0xFA,0x93,0xF3,0x83,
	0x7A,0xF2,0x63,0xCE,0x04,0x91,0xD4,0x58,0x48,0xF8,0x2C,0x39,0x7F,0xEE,0x03,0xE3,
	0xA3,0xF2,0x00,0x71,0x67,0x1C,0xF9,0xBD,0x7D,0x22,0x00,0x1A,0x2D,0x5A,0x7B,0xD2,
	0x94,0xCC,0x57,0x3B,0x22,0xCB,0xDC,0xE2,0x96,0xF3,0x9D,0x14,0xA6,0x0B,0x6B,0x5A
};